项目简介：
采用I/O复用技术select实现socket通信，采用多线程负责每个客户操作处理，完成Linux下的多客户聊天室！

OS：Ubuntu 15.04

IDE：vim gcc make

DB：Sqlite 3

Time：2015-12-09 ~ 2012-12-21

项目功能架构：

 1. 采用client/server结构；
 2. 给出客户操作主界面（注册、登录、帮助和退出）、登录后主界面（查看在线列表、私聊、群聊、查看聊天记录、退出）；
 3. 多客户可同时连接服务器进行自己操作；

##服务器端##
 1. server.c：服务器端主程序代码文件；
 2. config.h：服务器端配置文件（包含需要的头文件、常量、数据结构及函数声明）；
 3. config.c：服务器端公共函数的实现文件；
 4. list.c：链表实现文件，用于维护在线用户链表的添加、更新、删除操作；
 5. register.c：服务器端实现用户注册；
 6. login.c：服务器端实现用户登录；
 7. chat.c：服务器端实现用户的聊天互动操作；
 8. Makefile：服务器端make文件，控制台执行make命令可直接生成可执行文件server


##客户端##
 1. client.c：客户端主程序代码文件；
 2. config.h：客户端配置文件（包含需要的头文件、常量、数据结构及函数声明）；
 3. config.c：客户端公共函数的实现文件；
 4. register.c：客户端实现用户注册；
 5. login.c：客户端实现用户登录；
 6. chat.c：客户端实现用户的聊天互动操作；
 7. Makefile：客户端make文件，控制台执行make命令可直接生成可执行文件client；
 8. interface.c：客户端界面文件；
 
 ##modify by cheyang at 2019.05.23 begin ##
--|client
file:config.h
   1.//修改为当前环境的db地址
   #define DB_NAME "/root/cheyang/src/st_code/Socket-master/ChatRome/chatRome.db"

--|server 
file:config.h
  //修改为当前环境的db地址
   #define DB_NAME "/root/cheyang/src/st_code/Socket-master/ChatRome/chatRome.db"
file:register.c<br>
修改1：
函数：loginUser修改内存拷贝
  memcpy(&user , buf , sizeof(buf)); =》  memcpy(&user , buf , sizeof(user));//modify by cheyang
函数：registerUser  
  memcpy(&user , buf , sizeof(buf)); =》   memcpy(&user , buf , sizeof(user));//修改sizefof为user
修改2：
函数：registerUser
  代码：sprintf(sql , "insert into User(userName
  去掉sql串中的registerTime字段插入，因为插入会coredump
file：server.c
函数：handleRequest
  memcpy(&message , buf , sizeof(buf)); =》修改为： memcpy(&message , buf , sizeof(message));
  send(sockfd , buf , sizeof(buf) , 0);=》修改为： send(sockfd , buf , sizeof(message) , 0);//modify by cheyang
##modify by cheyang at 2019.05.23 begin ##
